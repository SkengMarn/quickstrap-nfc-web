{"version":3,"file":"rateLimiter-RDTGfPPa.js","sources":["../../src/utils/rateLimiter.ts"],"sourcesContent":["/**\n * Rate Limiter for Authentication and API Calls\n * Prevents brute force attacks and API abuse\n */\n\ninterface RateLimitConfig {\n  maxAttempts: number;\n  windowMs: number;\n  blockDurationMs: number;\n}\n\ninterface RateLimitEntry {\n  attempts: number;\n  firstAttempt: number;\n  lastAttempt: number;\n  blocked: boolean;\n  blockExpiry?: number;\n}\n\nclass RateLimiter {\n  private attempts: Map<string, RateLimitEntry> = new Map();\n  private cleanupInterval: NodeJS.Timeout;\n\n  constructor() {\n    // Clean up old entries every 5 minutes\n    this.cleanupInterval = setInterval(() => {\n      this.cleanup();\n    }, 5 * 60 * 1000);\n  }\n\n  /**\n   * Check if an action is allowed for the given identifier\n   */\n  isAllowed(identifier: string, config: RateLimitConfig): boolean {\n    const now = Date.now();\n    const entry = this.attempts.get(identifier);\n\n    if (!entry) {\n      // First attempt\n      this.attempts.set(identifier, {\n        attempts: 1,\n        firstAttempt: now,\n        lastAttempt: now,\n        blocked: false\n      });\n      return true;\n    }\n\n    // Check if still blocked\n    if (entry.blocked && entry.blockExpiry && now < entry.blockExpiry) {\n      return false;\n    }\n\n    // Reset if window has expired\n    if (now - entry.firstAttempt > config.windowMs) {\n      this.attempts.set(identifier, {\n        attempts: 1,\n        firstAttempt: now,\n        lastAttempt: now,\n        blocked: false\n      });\n      return true;\n    }\n\n    // Check if max attempts exceeded\n    if (entry.attempts >= config.maxAttempts) {\n      // Block the identifier\n      this.attempts.set(identifier, {\n        ...entry,\n        blocked: true,\n        blockExpiry: now + config.blockDurationMs\n      });\n      return false;\n    }\n\n    // Increment attempts\n    this.attempts.set(identifier, {\n      ...entry,\n      attempts: entry.attempts + 1,\n      lastAttempt: now\n    });\n\n    return true;\n  }\n\n  /**\n   * Get remaining attempts for an identifier\n   */\n  getRemainingAttempts(identifier: string, config: RateLimitConfig): number {\n    const entry = this.attempts.get(identifier);\n    if (!entry) return config.maxAttempts;\n\n    const now = Date.now();\n    \n    // If window expired, reset\n    if (now - entry.firstAttempt > config.windowMs) {\n      return config.maxAttempts;\n    }\n\n    return Math.max(0, config.maxAttempts - entry.attempts);\n  }\n\n  /**\n   * Get time until unblocked (in milliseconds)\n   */\n  getTimeUntilUnblocked(identifier: string): number {\n    const entry = this.attempts.get(identifier);\n    if (!entry || !entry.blocked || !entry.blockExpiry) {\n      return 0;\n    }\n\n    const now = Date.now();\n    return Math.max(0, entry.blockExpiry - now);\n  }\n\n  /**\n   * Reset rate limit for an identifier\n   */\n  reset(identifier: string): void {\n    this.attempts.delete(identifier);\n  }\n\n  /**\n   * Clean up expired entries\n   */\n  private cleanup(): void {\n    const now = Date.now();\n    const maxAge = 24 * 60 * 60 * 1000; // 24 hours\n\n    for (const [identifier, entry] of this.attempts.entries()) {\n      // Remove old entries\n      if (now - entry.lastAttempt > maxAge) {\n        this.attempts.delete(identifier);\n        continue;\n      }\n\n      // Remove unblocked entries\n      if (entry.blocked && entry.blockExpiry && now > entry.blockExpiry) {\n        this.attempts.delete(identifier);\n      }\n    }\n  }\n\n  /**\n   * Get statistics for monitoring\n   */\n  getStats(): { totalIdentifiers: number; blockedIdentifiers: number } {\n    let blockedCount = 0;\n    const now = Date.now();\n\n    for (const entry of this.attempts.values()) {\n      if (entry.blocked && entry.blockExpiry && now < entry.blockExpiry) {\n        blockedCount++;\n      }\n    }\n\n    return {\n      totalIdentifiers: this.attempts.size,\n      blockedIdentifiers: blockedCount\n    };\n  }\n\n  /**\n   * Destroy the rate limiter and clean up resources\n   */\n  destroy(): void {\n    if (this.cleanupInterval) {\n      clearInterval(this.cleanupInterval);\n    }\n    this.attempts.clear();\n  }\n}\n\n// Create singleton instance\nexport const rateLimiter = new RateLimiter();\n\n// Predefined configurations\nexport const rateLimitConfigs = {\n  login: {\n    maxAttempts: 5,\n    windowMs: 15 * 60 * 1000, // 15 minutes\n    blockDurationMs: 30 * 60 * 1000 // 30 minutes\n  },\n  \n  api: {\n    maxAttempts: 100,\n    windowMs: 60 * 1000, // 1 minute\n    blockDurationMs: 5 * 60 * 1000 // 5 minutes\n  },\n  \n  telegram: {\n    maxAttempts: 10,\n    windowMs: 60 * 1000, // 1 minute\n    blockDurationMs: 10 * 60 * 1000 // 10 minutes\n  }\n};\n\nexport default rateLimiter;\n"],"names":["RateLimiter","__publicField","identifier","config","now","entry","maxAge","blockedCount","rateLimiter","rateLimitConfigs"],"mappings":"oKAmBA,MAAMA,CAAY,CAIhB,aAAc,CAHNC,EAAA,oBAA4C,KAC5CA,EAAA,wBAIN,KAAK,gBAAkB,YAAY,IAAM,CACvC,KAAK,QAAA,CACP,EAAG,EAAI,GAAK,GAAI,CAClB,CAKA,UAAUC,EAAoBC,EAAkC,CAC9D,MAAMC,EAAM,KAAK,IAAA,EACXC,EAAQ,KAAK,SAAS,IAAIH,CAAU,EAE1C,OAAKG,EAYDA,EAAM,SAAWA,EAAM,aAAeD,EAAMC,EAAM,YAC7C,GAILD,EAAMC,EAAM,aAAeF,EAAO,UACpC,KAAK,SAAS,IAAID,EAAY,CAC5B,SAAU,EACV,aAAcE,EACd,YAAaA,EACb,QAAS,EAAA,CACV,EACM,IAILC,EAAM,UAAYF,EAAO,aAE3B,KAAK,SAAS,IAAID,EAAY,CAC5B,GAAGG,EACH,QAAS,GACT,YAAaD,EAAMD,EAAO,eAAA,CAC3B,EACM,KAIT,KAAK,SAAS,IAAID,EAAY,CAC5B,GAAGG,EACH,SAAUA,EAAM,SAAW,EAC3B,YAAaD,CAAA,CACd,EAEM,KA3CL,KAAK,SAAS,IAAIF,EAAY,CAC5B,SAAU,EACV,aAAcE,EACd,YAAaA,EACb,QAAS,EAAA,CACV,EACM,GAsCX,CAKA,qBAAqBF,EAAoBC,EAAiC,CACxE,MAAME,EAAQ,KAAK,SAAS,IAAIH,CAAU,EAM1C,MALI,CAACG,GAEO,KAAK,IAAA,EAGPA,EAAM,aAAeF,EAAO,SAC7BA,EAAO,YAGT,KAAK,IAAI,EAAGA,EAAO,YAAcE,EAAM,QAAQ,CACxD,CAKA,sBAAsBH,EAA4B,CAChD,MAAMG,EAAQ,KAAK,SAAS,IAAIH,CAAU,EAC1C,GAAI,CAACG,GAAS,CAACA,EAAM,SAAW,CAACA,EAAM,YACrC,MAAO,GAGT,MAAMD,EAAM,KAAK,IAAA,EACjB,OAAO,KAAK,IAAI,EAAGC,EAAM,YAAcD,CAAG,CAC5C,CAKA,MAAMF,EAA0B,CAC9B,KAAK,SAAS,OAAOA,CAAU,CACjC,CAKQ,SAAgB,CACtB,MAAME,EAAM,KAAK,IAAA,EACXE,EAAS,GAAK,GAAK,GAAK,IAE9B,SAAW,CAACJ,EAAYG,CAAK,IAAK,KAAK,SAAS,UAAW,CAEzD,GAAID,EAAMC,EAAM,YAAcC,EAAQ,CACpC,KAAK,SAAS,OAAOJ,CAAU,EAC/B,QACF,CAGIG,EAAM,SAAWA,EAAM,aAAeD,EAAMC,EAAM,aACpD,KAAK,SAAS,OAAOH,CAAU,CAEnC,CACF,CAKA,UAAqE,CACnE,IAAIK,EAAe,EACnB,MAAMH,EAAM,KAAK,IAAA,EAEjB,UAAWC,KAAS,KAAK,SAAS,OAAA,EAC5BA,EAAM,SAAWA,EAAM,aAAeD,EAAMC,EAAM,aACpDE,IAIJ,MAAO,CACL,iBAAkB,KAAK,SAAS,KAChC,mBAAoBA,CAAA,CAExB,CAKA,SAAgB,CACV,KAAK,iBACP,cAAc,KAAK,eAAe,EAEpC,KAAK,SAAS,MAAA,CAChB,CACF,CAGO,MAAMC,EAAc,IAAIR,EAGlBS,EAAmB,CAC9B,MAAO,CACL,YAAa,EACb,SAAU,GAAK,GAAK,IACpB,gBAAiB,GAAK,GAAK,GAAA,EAG7B,IAAK,CACH,YAAa,IACb,SAAU,GAAK,IACf,gBAAiB,EAAI,GAAK,GAAA,EAG5B,SAAU,CACR,YAAa,GACb,SAAU,GAAK,IACf,gBAAiB,GAAK,GAAK,GAAA,CAE/B"}